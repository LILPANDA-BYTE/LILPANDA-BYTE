name: Generate Constellation Animation

on:
  schedule:
    - cron: "0 */6 * * *"  # Every 6 hours
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  generate:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Create output directory
        run: mkdir -p dist
        
      - name: Generate GitHub contribution snake
        uses: Platane/snk@v3
        with:
          github_user_name: ${{ github.repository_owner }}
          outputs: |
            dist/github-contribution-grid-snake.svg
            dist/github-contribution-grid-snake-dark.svg?palette=github-dark
            dist/github-contribution-grid-snake.gif?color_snake=orange&color_dots=#bfd6f6,#8cc8ff,#64b5f6,#42a5f5,#2196f3
            
      - name: Create Interactive Constellation HTML
        run: |
          cat > dist/constellation.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Constellation GitHub Activity - NAFEW AZIM</title>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <style>
                  body { 
                      margin: 0; 
                      background: #0a0a0a; 
                      font-family: 'Segoe UI', Arial, sans-serif; 
                      overflow: hidden;
                  }
                  canvas { display: block; }
                  .info { 
                      position: absolute; 
                      top: 20px; 
                      left: 20px; 
                      color: white; 
                      font-size: 18px; 
                      z-index: 10; 
                      text-shadow: 0 0 10px rgba(255,255,255,0.5);
                      max-width: 400px;
                  }
                  .info h2 {
                      margin: 0 0 10px 0;
                      font-size: 24px;
                      background: linear-gradient(45deg, #00d9ff, #ff6b6b, #4ecdc4);
                      -webkit-background-clip: text;
                      -webkit-text-fill-color: transparent;
                      background-clip: text;
                  }
                  .legend { 
                      position: absolute; 
                      bottom: 20px; 
                      right: 20px; 
                      color: white; 
                      font-size: 12px; 
                      z-index: 10; 
                      text-shadow: 0 0 5px rgba(255,255,255,0.3);
                      background: rgba(0,0,0,0.5);
                      padding: 15px;
                      border-radius: 10px;
                      border: 1px solid rgba(255,255,255,0.2);
                  }
                  .controls {
                      position: absolute;
                      top: 20px;
                      right: 20px;
                      color: white;
                      z-index: 10;
                  }
                  .controls button {
                      background: rgba(0,217,255,0.2);
                      border: 1px solid #00d9ff;
                      color: white;
                      padding: 8px 15px;
                      margin: 5px;
                      border-radius: 5px;
                      cursor: pointer;
                      transition: all 0.3s ease;
                  }
                  .controls button:hover {
                      background: rgba(0,217,255,0.4);
                      box-shadow: 0 0 15px rgba(0,217,255,0.3);
                  }
              </style>
          </head>
          <body>
              <div class="info">
                  <h2>ðŸŒŸ NAFEW AZIM - Constellation of Code ðŸŒŸ</h2>
                  <p>Each star represents your contributions across the cosmos of development</p>
                  <p><small>Machine Learning Engineer | AI Researcher | Deep Learning Specialist</small></p>
              </div>
              <div class="controls">
                  <button onclick="toggleShootingStars()">Toggle Shooting Stars</button>
                  <button onclick="resetAnimation()">Reset View</button>
              </div>
              <div class="legend">
                  <p><strong>Constellation Guide:</strong></p>
                  <p>âœ¨ <span style="color: #4fc3f7;">Blue</span> = Machine Learning<br>
                  ðŸŸ£ <span style="color: #ab47bc;">Purple</span> = Deep Learning<br>
                  ðŸŸ¢ <span style="color: #66bb6a;">Green</span> = Data Science<br>
                  ðŸŸ  <span style="color: #ffa726;">Orange</span> = Python<br>
                  ðŸ”´ <span style="color: #ef5350;">Red</span> = Neural Networks<br>
                  ðŸ”µ <span style="color: #26c6da;">Cyan</span> = Computer Vision<br>
                  ðŸš€ Shooting stars = Recent activity</p>
              </div>
              <canvas id="constellation"></canvas>
              
              <script>
                  const canvas = document.getElementById('constellation');
                  const ctx = canvas.getContext('2d');
                  
                  let animationRunning = true;
                  let shootingStarsEnabled = true;
                  
                  // Set canvas size
                  function resizeCanvas() {
                      canvas.width = window.innerWidth;
                      canvas.height = window.innerHeight;
                  }
                  resizeCanvas();
                  
                  // Global arrays
                  const stars = [];
                  const constellations = [];
                  const shootingStars = [];
                  
                  // Create stars based on skill constellations
                  function createStars() {
                      stars.length = 0;
                      constellations.length = 0;
                      
                      const skillConstellations = [
                          { name: 'Machine Learning', x: canvas.width * 0.2, y: canvas.height * 0.3, size: 8, color: '#4fc3f7' },
                          { name: 'Deep Learning', x: canvas.width * 0.75, y: canvas.height * 0.25, size: 7, color: '#ab47bc' },
                          { name: 'Data Science', x: canvas.width * 0.5, y: canvas.height * 0.5, size: 6, color: '#66bb6a' },
                          { name: 'Python', x: canvas.width * 0.8, y: canvas.height * 0.65, size: 9, color: '#ffa726' },
                          { name: 'Neural Networks', x: canvas.width * 0.25, y: canvas.height * 0.75, size: 7, color: '#ef5350' },
                          { name: 'Computer Vision', x: canvas.width * 0.6, y: canvas.height * 0.8, size: 6, color: '#26c6da' }
                      ];
                      
                      skillConstellations.forEach((constellation) => {
                          const starCount = constellation.size;
                          
                          for (let i = 0; i < starCount; i++) {
                              const angle = (i * Math.PI * 2) / starCount;
                              const radius = 40 + Math.random() * 80;
                              const x = constellation.x + Math.cos(angle) * radius;
                              const y = constellation.y + Math.sin(angle) * radius;
                              
                              // Ensure stars stay within canvas bounds
                              if (x > 50 && x < canvas.width - 50 && y > 50 && y < canvas.height - 50) {
                                  stars.push({
                                      x: x,
                                      y: y,
                                      brightness: 0.4 + Math.random() * 0.6,
                                      size: 1.5 + Math.random() * 2.5,
                                      twinkle: Math.random() * Math.PI * 2,
                                      constellation: constellation.name,
                                      color: constellation.color,
                                      baseX: x,
                                      baseY: y
                                  });
                              }
                          }
                          
                          constellations.push(constellation);
                      });
                      
                      // Add background stars
                      for (let i = 0; i < 150; i++) {
                          stars.push({
                              x: Math.random() * canvas.width,
                              y: Math.random() * canvas.height,
                              brightness: 0.1 + Math.random() * 0.3,
                              size: 0.5 + Math.random() * 1,
                              twinkle: Math.random() * Math.PI * 2,
                              constellation: 'background',
                              color: '#ffffff',
                              baseX: 0,
                              baseY: 0
                          });
                      }
                  }
                  
                  function createShootingStar() {
                      if (!shootingStarsEnabled) return;
                      
                      const colors = ['#ffff00', '#ff6b6b', '#4ecdc4', '#45b7d1', '#f9ca24', '#00d9ff'];
                      shootingStars.push({
                          x: -50,
                          y: Math.random() * canvas.height,
                          speed: 4 + Math.random() * 6,
                          length: 30 + Math.random() * 70,
                          alpha: 1,
                          color: colors[Math.floor(Math.random() * colors.length)]
                      });
                  }
                  
                  function animate() {
                      if (!animationRunning) return;
                      
                      // Space background gradient
                      const gradient = ctx.createRadialGradient(
                          canvas.width/2, canvas.height/2, 0, 
                          canvas.width/2, canvas.height/2, Math.max(canvas.width, canvas.height)
                      );
                      gradient.addColorStop(0, '#0a0a2e');
                      gradient.addColorStop(0.5, '#16213e');
                      gradient.addColorStop(1, '#0a0a0a');
                      ctx.fillStyle = gradient;
                      ctx.fillRect(0, 0, canvas.width, canvas.height);
                      
                      // Draw constellation connections
                      constellations.forEach(constellation => {
                          const constellationStars = stars.filter(star => star.constellation === constellation.name);
                          if (constellationStars.length > 2) {
                              ctx.strokeStyle = constellation.color + '40'; // Add transparency
                              ctx.lineWidth = 1;
                              ctx.beginPath();
                              
                              constellationStars.forEach((star, idx) => {
                                  if (idx === 0) {
                                      ctx.moveTo(star.x, star.y);
                                  } else {
                                      ctx.lineTo(star.x, star.y);
                                  }
                              });
                              ctx.closePath();
                              ctx.stroke();
                          }
                      });
                      
                      // Draw stars with improved rendering
                      stars.forEach(star => {
                          const time = Date.now() * 0.002;
                          const twinkle = Math.sin(star.twinkle + time) * 0.3 + 0.7;
                          const alpha = star.brightness * twinkle;
                          
                          // Convert hex to rgba
                          const hexToRgba = (hex, alpha) => {
                              const r = parseInt(hex.slice(1, 3), 16);
                              const g = parseInt(hex.slice(3, 5), 16);
                              const b = parseInt(hex.slice(5, 7), 16);
                              return `rgba(${r}, ${g}, ${b}, ${alpha})`;
                          };
                          
                          // Star glow
                          const glowGradient = ctx.createRadialGradient(star.x, star.y, 0, star.x, star.y, star.size * 4);
                          glowGradient.addColorStop(0, hexToRgba(star.color, alpha * 0.8));
                          glowGradient.addColorStop(1, hexToRgba(star.color, 0));
                          
                          ctx.fillStyle = glowGradient;
                          ctx.beginPath();
                          ctx.arc(star.x, star.y, star.size * 4, 0, Math.PI * 2);
                          ctx.fill();
                          
                          // Star core
                          ctx.fillStyle = hexToRgba(star.color, alpha);
                          ctx.beginPath();
                          ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
                          ctx.fill();
                          
                          star.twinkle += 0.03;
                      });
                      
                      // Draw constellation labels
                      ctx.font = 'bold 16px Segoe UI, Arial';
                      ctx.textAlign = 'center';
                      ctx.textBaseline = 'middle';
                      
                      constellations.forEach(constellation => {
                          // Text shadow
                          ctx.shadowColor = constellation.color;
                          ctx.shadowBlur = 15;
                          ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
                          ctx.fillText(constellation.name, constellation.x, constellation.y - 80);
                          ctx.shadowBlur = 0;
                      });
                      
                      // Handle shooting stars
                      for (let i = shootingStars.length - 1; i >= 0; i--) {
                          const star = shootingStars[i];
                          
                          // Draw trail
                          const trailGradient = ctx.createLinearGradient(
                              star.x - star.length, star.y, star.x, star.y
                          );
                          trailGradient.addColorStop(0, star.color + '00');
                          trailGradient.addColorStop(1, star.color + Math.floor(star.alpha * 255).toString(16).padStart(2, '0'));
                          
                          ctx.strokeStyle = trailGradient;
                          ctx.lineWidth = 3;
                          ctx.beginPath();
                          ctx.moveTo(star.x - star.length, star.y);
                          ctx.lineTo(star.x, star.y);
                          ctx.stroke();
                          
                          // Star head with glow
                          const headGradient = ctx.createRadialGradient(star.x, star.y, 0, star.x, star.y, 6);
                          headGradient.addColorStop(0, star.color + Math.floor(star.alpha * 255).toString(16).padStart(2, '0'));
                          headGradient.addColorStop(1, star.color + '00');
                          
                          ctx.fillStyle = headGradient;
                          ctx.beginPath();
                          ctx.arc(star.x, star.y, 6, 0, Math.PI * 2);
                          ctx.fill();
                          
                          // Update position
                          star.x += star.speed;
                          star.alpha -= 0.008;
                          
                          // Remove if off screen or faded
                          if (star.x > canvas.width + 100 || star.alpha <= 0) {
                              shootingStars.splice(i, 1);
                          }
                      }
                      
                      // Create new shooting stars randomly
                      if (Math.random() < 0.02 && shootingStarsEnabled) {
                          createShootingStar();
                      }
                      
                      requestAnimationFrame(animate);
                  }
                  
                  // Control functions
                  function toggleShootingStars() {
                      shootingStarsEnabled = !shootingStarsEnabled;
                      if (!shootingStarsEnabled) {
                          shootingStars.length = 0;
                      }
                  }
                  
                  function resetAnimation() {
                      shootingStars.length = 0;
                      createStars();
                  }
                  
                  // Event listeners
                  window.addEventListener('resize', () => {
                      resizeCanvas();
                      createStars();
                  });
                  
                  // Initialize
                  createStars();
                  animate();
              </script>
          </body>
          </html>
          EOF

      - name: Create Static SVG Constellation
        run: |
          cat > dist/constellation-static.svg << 'EOF'
          <svg width="800" height="400" xmlns="http://www.w3.org/2000/svg">
            <defs>
              <radialGradient id="spaceGradient" cx="50%" cy="50%">
                <stop offset="0%" style="stop-color:#0a0a2e;stop-opacity:1" />
                <stop offset="50%" style="stop-color:#16213e;stop-opacity:1" />
                <stop offset="100%" style="stop-color:#0a0a0a;stop-opacity:1" />
              </radialGradient>
              <filter id="starGlow">
                <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
                <feMerge> 
                  <feMergeNode in="coloredBlur"/>
                  <feMergeNode in="SourceGraphic"/>
                </feMerge>
              </filter>
              <filter id="textGlow">
                <feGaussianBlur stdDeviation="1" result="coloredBlur"/>
                <feMerge> 
                  <feMergeNode in="coloredBlur"/>
                  <feMergeNode in="SourceGraphic"/>
                </feMerge>
              </filter>
            </defs>
            
            <!-- Space Background -->
            <rect width="800" height="400" fill="url(#spaceGradient)"/>
            
            <!-- Machine Learning Constellation (Blue) -->
            <g>
              <text x="160" y="100" fill="white" font-family="Arial" font-size="14" text-anchor="middle" filter="url(#textGlow)">Machine Learning</text>
              <circle cx="140" cy="120" r="3" fill="#4fc3f7" filter="url(#starGlow)">
                <animate attributeName="opacity" values="0.5;1;0.5" dur="3s" repeatCount="indefinite"/>
              </circle>
              <circle cx="180" cy="115" r="2.5" fill="#29b6f6" filter="url(#starGlow)">
                <animate attributeName="opacity" values="0.6;1;0.6" dur="2.5s" repeatCount="indefinite" begin="0.5s"/>
              </circle>
              <circle cx="160" cy="140" r="2" fill="#03a9f4" filter="url(#starGlow)">
                <animate attributeName="opacity" values="0.4;0.9;0.4" dur="4s" repeatCount="indefinite" begin="1s"/>
              </circle>
              <circle cx="120" cy="135" r="2.8" fill="#0288d1" filter="url(#starGlow)">
                <animate attributeName="opacity" values="0.7;1;0.7" dur="3.5s" repeatCount="indefinite" begin="1.5s"/>
              </circle>
              <path d="M 140,120 L 180,115 L
